# Base64 encode a string
function b64() {
    echo -n "$*" | base64
}

function b64decode() {
    echo -n "$*" | base64 --decode
}

# Opens a file with Visual Studio Code
function code() {
    VSCODE_CWD="$PWD" open -n -b "com.microsoft.VSCode" --args $*
}

# Preview CSVs
function csvpreview() {
    sed 's/,,/, ,/g;s/,,/, ,/g' "$@" | column -s, -t | less -#2 -N -S
}

# Usage: encrypt file <output> (default: file.gpg)
function encrypt() {
    output="$1.gpg"

    if [ -n "$2" ]; then
        output="$2"
    fi

    gpg2 --encrypt --recipient vincent --output $output $1
}

# Usage: decrypt file <output>
function decrypt() {
    command="gpg2 --decrypt $1"

    if [ -n "$2" ]; then
        command="$command > $2"
    fi

    eval $command
}

# Clones if a Git repository is given, elsewhere just cd
function cdc() {
    name=`sed -e 's/.*\///g' <<< $1`

    if [[ ! -d "$1" && $1 =~ ^(github|bitbucket|gitlab)\.[a-z]{2,}/.*$ ]]; then
        ssh=`sed -e 's/^/git@/' -e 's/$/.git/' -e 's/\//:/' <<< $1`
        git clone $ssh;
    fi

    cd $name;
}

# Determines size of a file or total size of a directory
function fs() {
    if du -b /dev/null > /dev/null 2>&1; then
        local arg=-sbh;
    else
        local arg=-sh;
    fi
    if [[ -n "$@" ]]; then
        du $arg -- "$@";
    else
        du $arg .[^.]* ./*;
    fi;
}

# Creates a data URL from a file
function dataurl() {
    local mimeType=$(file -b --mime-type "$1");
    if [[ $mimeType == text/* ]]; then
        mimeType="${mimeType};charset=utf-8";
    fi
    echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')";
}

# Returns useful information using dig tool
function diga() {
    dig +nocmd "$1" any +multiline +noall +answer;
}

# Returns information about usual subdomains
function dig_in_parallel() {
    dig=$(dig +noall +answer $1);

    if [ -n "$dig" ]; then
        echo "âœ” $dig";
    fi
}

function digscan() {
    set +m;

    subdomains=( a alert adm admin administration api apis api-gateway assets b back backend b2b b2c black blog bo board brown build builds c cache cached ceph cli client clients ci cloud conf config configuration console consul contact contacts contract contracts cust customer customers d dark dashboard database db dev demo directory display dl dns doc documentation domain domains download downloads e elasticsearch elb elk endpoint exchange exchanges ext extern external externals extra extranet f factory free files front frontend ftp g gateway geo git gitlab github go golang grafana graph graphs grey green group h ha haproxy health healths home host hosting hub hubs i int integ integration intra intranet j jenkins jira k kibana k8s kube kubectl kubernetes l light live lb loadbalancer loader logs m mail manager market marketing minio mobile monitor monitoring mongo mongodb mysql movie movies n nas new news no o open openshift opensource order orders p package packages packagist partner partners perso preprod priv private prive portal postgres postgresql pro pros purple q quality qualys r recette red redis reg registry rule rules root roots s s3 secret secrets share sale sales serv server servers smtp source sources ssh sso stat static statistics stats status storage store stream t test tests time timeline u v vault view views vol vols volume volumes vpn w web webmail white wiki work worker workers www x y yellow yes z zoo )

    echo "Checking...\n";

    for subdomain in "${subdomains[@]}"; do
        dig_in_parallel "$subdomain.$1" &
    done

    wait
    set -m;
}

# Automatically Starting tmux on SSH
function ssht() {
  SSH_HOST="${@: -1}"
  tabname "$SSH_HOST"
  ssh "$@" -t 'tmux ls && exec tmux a || exec tmux new || exec $SHELL -l'
}

# Generates a password and returns hashed values
function genpasswd() {
    passwd=`env LC_CTYPE=C tr -dc 'a-zA-Z0-9-_\$\?' < /dev/urandom | head -c 20`;
    sha256=`echo $passwd | shasum -a 256`;
    sha512=`echo $passwd | shasum -a 512`;
    md5=`md5 -s $passwd | cut -d'=' -f2 | xargs`

    echo "Raw: $passwd\n\nSHA256: $sha256\nSHA512: $sha512\n\nMD5: $md5";
}

# Gets iTunes current track information
function itunes_title_script() {
    osascript -e 'tell application "iTunes" to get the '"$1"' of the current track'
}

function track() {
    artist=$(itunes_title_script artist)
    name=$(itunes_title_script name)

    echo "$artist - $name"
}
